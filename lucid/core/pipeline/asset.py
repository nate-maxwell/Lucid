"""
# Asset Pipeline Class

* Description:

    The base for all asset related pipelines. An 'asset' is any content file
    generated by artists. These could be models, rigs, shaders, textures,
    animations, grooms, cutscene shots, layouts, etc.

    Assets pipeline will need two primary responsibilities: writing to disk,
    and registering in a database. Each task may come with various sub-steps,
    such as path or name generation.
"""


import enum

from lucid.core.pipeline.base import BasePipeline
from lucid.core.unit.work import WorkUnit


@enum.unique
class Hook(enum.Enum):
    """Most common file io hook types."""
    PRE_PUBLISH = 'pre_publish'
    POST_PUBLISH = 'post_publish'
    PRE_OPEN = 'pre_open'
    POST_OPEN = 'post_open'
    PRE_IMPORT = 'pre_import'
    POST_IMPORT = 'post_import'


class AssetPipeline(BasePipeline):
    """Base asset pipeline for all pipeline objects that write out a file."""

    _hooks = {
        Hook.PRE_PUBLISH.value: [],
        Hook.POST_PUBLISH.value: [],
        Hook.PRE_OPEN.value: [],
        Hook.POST_OPEN.value: [],
        Hook.PRE_IMPORT.value: [],
        Hook.POST_IMPORT.value: []
    }

    # --------File IO Methods--------------------------------------------------

    @classmethod
    def publish_file(cls, wu: WorkUnit) -> None:
        """Publish a file using domain-specific logic, then register
        it in the database.
        """
        cls.log_with_context(wu, 'Preprocessing publish')
        cls.run_hooks(Hook.PRE_PUBLISH.value, wu)

        cls.log_with_context(wu, 'Publishing')
        cls.dcc_publish(wu)
        cls.log_with_context(wu, 'Registering')
        cls.register_in_database(wu)

        cls.log_with_context(wu, 'Postprocessing publish')
        cls.run_hooks(Hook.POST_PUBLISH.value, wu)

        cls.log_with_context(wu, 'Publish complete.')

    @classmethod
    def open_file(cls, wu: WorkUnit) -> None:
        """Open a file using the application's API."""
        cls.log_with_context(wu, 'Opening wu')
        cls.run_hooks(Hook.PRE_OPEN.value, wu)
        cls.dcc_open(wu)
        cls.run_hooks(Hook.POST_OPEN.value, wu)
        cls.log_with_context(wu, 'wu opened')

    @classmethod
    def import_file(cls, wu: WorkUnit) -> None:
        """Import a file using the application's API."""
        cls.log_with_context(wu, 'Importing wu')
        cls.run_hooks(Hook.PRE_IMPORT.value, wu)
        cls.dcc_import(wu)
        cls.run_hooks(Hook.POST_IMPORT.value, wu)
        cls.log_with_context(wu, 'wu imported')

    # --------Derived Methods--------------------------------------------------

    @classmethod
    def register_in_database(cls, wu: WorkUnit) -> None:
        """Override to specify how a given file becomes registered in a
        corresponding database.
        """
        raise NotImplemented

    @classmethod
    def dcc_publish(cls, wu: WorkUnit) -> None:
        """Override to specify how a given DCC publishes a file."""
        raise NotImplemented

    @classmethod
    def dcc_open(cls, wu: WorkUnit) -> None:
        """Override to specify how a given DCC opens a file."""
        raise NotImplemented

    @classmethod
    def dcc_import(cls, wu: WorkUnit) -> None:
        """Override to specify how a given DCC imports a file."""
        raise NotImplemented
