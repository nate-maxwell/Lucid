"""
# Global constants and paths.

* Description:

    All non-dynamic, or fixed, values and paths for the core pipeline.

    All paths are named as NAME_DIR while all files are named as NAME_FILE.
"""


import enum
import getpass
import os
import sys
from pathlib import Path

import lucid.core


# ----------Repo---------------------------------------------------------------

PYTHON_EXEC = Path(sys.executable)
VENV_SITE_PACKAGES_DIR = Path(PYTHON_EXEC.parent.parent, 'Lib/site-packages')

try:
    LUCID_REPO_DIR = Path(lucid.core.__file__).parent.parent.parent
except TypeError:
    # Local editable installations return None for module.__file__
    # noinspection PyUnresolvedReferences
    _base = Path(lucid.core.__spec__.submodule_search_locations[0])
    LUCID_REPO_DIR = _base.parent.parent

LUCID_DIR = Path(LUCID_REPO_DIR, 'lucid')

NETWORK_DRIVE_ROOT = Path('T:/')

VERSION_PADDING = 3

UNASSIGNED = 'UNASSIGNED'
"""A None-like value for when None is not a good idea to use, or semantically
it would be better to specify unassigned values rather than uninitialized
values.
"""


# ----------User---------------------------------------------------------------

USERNAME = getpass.getuser()

_appdata = os.environ['APPDATA'].replace(';', '')
USER_APPDATA_DIR = Path(_appdata, 'lucid/user')
"""The directory for all user specific settings.
Exists in user's APPDATA folder.
"""

USER_SETTINGS_FILE = Path(USER_APPDATA_DIR, 'user_settings.json')
"""The user_settings json file path for the user settings menu in the
launcher.
"""

USER_LOG_DIR = Path(USER_APPDATA_DIR, 'logs')
"""Log files, typically in the form of jsons, are stored here. Logs can be
generated by an exception tracker, telemetry, or other systems.
"""

HOME_DIR = Path(NETWORK_DRIVE_ROOT, 'home')
"""Directory containing all user home dirs.

Home dirs are user specific folders where users can put independent data,
not generated by the pipeline, but they may still need.

I.e. reference material or test files.
"""

USER_HOME_DIR = Path(HOME_DIR, USERNAME)
"""The user's specific home dir."""

DEFAULT_META_TOKEN = 'ab4c038f-8789-436f-a314-bf92b769c7a2'
"""Default meta token for various user details."""


@enum.unique
class Role(enum.Enum):
    """In what capacity was the artist using the tools?
    E.g. mode, rig, texture, etc.
    """
    MODEL = 'MODEL'
    RIG = 'RIG'
    TEXTURE = 'TEXTURE'
    SHADER = 'SHADER'
    ANIM = 'ANIM'
    COMP = 'COMP'
    LEVEL = 'LEVEL'
    SYSTEM = 'SYSTEM'

    UNASSIGNED = UNASSIGNED


# ----------Facility-----------------------------------------------------------

# -----General-----

FACILITY_DIR = Path(NETWORK_DRIVE_ROOT, 'facility')
"""For all things that the pipeline is dependent on but aren't tied to and
individual project's config values, resources, or assets.
"""

# -----Pipeline-----

FACILITY_PIPE_CONFIGS_DIR = Path(FACILITY_DIR, 'pipeline_configs')

# Very likely this is a terrible spot for this. There should be some form of
# dynamic path assembly with a small bit of obfuscation.
USER_DETAILS_DIR = Path(FACILITY_PIPE_CONFIGS_DIR, 'users')
"""The location of all user's individual details files."""

FACILITY_SYSTEMS_DIR = Path(FACILITY_PIPE_CONFIGS_DIR, 'sys')
"""Directory for various system config files."""

# -----Projects----------------------------------------------------------------

PROJECTS_DIR = Path(NETWORK_DRIVE_ROOT, 'projects')
"""The 'root' projects path to where all projects are stored."""


# ----------Work---------------------------------------------------------------

@enum.unique
class Domain(enum.Enum):
    """The current item's domain, e.g. anim, comp, model, rig, etc."""
    ANIM = 'anim'
    COMP = 'comp'
    LAYOUT = 'layout'
    MODEL = 'model'
    RIG = 'rig'
    SHADER = 'shader'
    TEXTURE = 'texture'
    SYSTEM = 'system'

    UNASSIGNED = UNASSIGNED


@enum.unique
class Dcc(enum.Enum):
    MAYA = 'MAYA'
    PAINTER = 'PAINTER'
    DESIGNER = 'DESIGNER'
    UNREAL = 'UNREAL'

    UNASSIGNED = UNASSIGNED


# ----------Environment--------------------------------------------------------

ENV_PROJECT = 'ENV_PROJECT'
ENV_DCC = 'ENV_DCC'
ENV_SQLALCHEMY_ECHO = 'ENV_SQLALCHEMY_ECHO'
