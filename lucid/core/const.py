"""
# Global constants and paths.

* Description:

    All non-dynamic, or fixed, values and paths for the core pipeline.

    All paths are named as NAME_PATH while all files are named as NAME_FILE.
    All enum values are ENUM_VALUE, e.g. DCC_MAYA, or DOMAIN_TEXTURE.
"""


import enum
import getpass
import os
import sys
from pathlib import Path

import lucid.core


def _make_dir(path: Path) -> None:
    if not os.path.exists(path):
        os.makedirs(path)


# ----------Repo---------------------------------------------------------------

PYTHON_EXEC = Path(sys.executable)
VENV_SITE_PACKAGES_DIR = Path(PYTHON_EXEC.parent.parent, 'Lib/site-packages')

try:
    LUCID_REPO_DIR = Path(lucid.core.__file__).parent.parent.parent
except TypeError:
    # Local editable installations return None for module.__file__
    # noinspection PyUnresolvedReferences
    LUCID_REPO_DIR = Path(lucid.core.__spec__.submodule_search_locations._path[0])

LUCID_DIR = Path(LUCID_REPO_DIR, 'lucid')

NETWORK_DRIVE_ROOT = Path('T:/')

VERSION_PADDING = 3

UNASSIGNED = 'UNASSIGNED'
"""A None-like value for when None is not a good idea to use, or semantically
it would be better to specify unassigned values rather than uninitialized
values.
"""


# ----------User---------------------------------------------------------------

USERNAME = getpass.getuser()

_appdata = os.environ['APPDATA'].replace(';', '')
USER_APPDATA_DIR = Path(_appdata, 'lucid/user')
"""The directory for all user specific settings.
Exists in user's APPDATA folder.
"""
_make_dir(USER_APPDATA_DIR)

USER_SETTINGS_FILE = Path(USER_APPDATA_DIR, 'user_settings.json')
"""The user_settings json file path for the user settings menu in the
launcher.
"""

USER_LOG_DIR = Path(USER_APPDATA_DIR, 'logs')
"""Log files, typically in the form of jsons, are stored here. Logs can be
generated by an exception tracker, telemetry, or other systems.
"""
_make_dir(USER_LOG_DIR)


@enum.unique
class Role(enum.Enum):
    UNASSIGNED = UNASSIGNED
    MODEL = 'ROLE_MODEL'
    RIG = 'ROLE_RIG'
    TEXTURE = 'ROLE_TEXTURE'
    ANIM = 'ROLE_ANIM'
    COMP = 'ROLE_COMP'
    LEVEL = 'ROLE_LEVEL'
    SYSTEM = 'ROLE_SYSTEM'


# ----------Work---------------------------------------------------------------

@enum.unique
class Domain(enum.Enum):
    UNASSIGNED = UNASSIGNED
    ANIM = 'DOMAIN_ANIM'
    COMP = 'DOMAIN_COMP'
    LAYOUT = 'DOMAIN_LAYOUT'
    MODEL = 'DOMAIN_MODEL'
    RIG = 'DOMAIN_RIG'
    SHADER = 'DOMAIN_SHADER'
    TEXTURE = 'DOMAIN_TEXTURE'
    SYSTEM = 'DOMAIN_SYSTEM'


@enum.unique
class DCCs(enum.Enum):
    MAYA = 'DCC_MAYA'
    PAINTER = 'DCC_PAINTER'
    DESIGNER = 'DCC_DESIGNER'
    UNREAL = 'DCC_UNREAL'


# ----------Facility-----------------------------------------------------------

# -----General-----

FACILITY_DIR = Path(NETWORK_DRIVE_ROOT, 'facility')
"""For all things that the pipeline is dependent on but aren't tied to and
individual project's config values, resources, or assets.
"""

# -----Pipeline-----

FACILITY_PIPE_CONFIGS_DIR = Path(FACILITY_DIR, 'pipeline_configs')
_make_dir(FACILITY_PIPE_CONFIGS_DIR)

# Very likely this is a terrible spot for this. There should be some form of
# dynamic path assembly with a small bit of obfuscation.
USER_DETAILS_DIR = Path(FACILITY_PIPE_CONFIGS_DIR, 'users')
"""The location of all user's individual details files."""
_make_dir(USER_DETAILS_DIR)

USER_DETAILS_FILE = Path(USER_DETAILS_DIR, f'{USERNAME}.json')
"""A record of all details about a user, such as roles, permissions, accessible
projects, etc.
"""

# -----Projects-----

PROJECTS_DIR = Path(NETWORK_DRIVE_ROOT, 'projects')
"""The 'root' projects path to where all projects are stored."""
_make_dir(FACILITY_PIPE_CONFIGS_DIR)


# ----------Environment--------------------------------------------------------

ENV_PROJECT = 'ENV_PROJECT'
